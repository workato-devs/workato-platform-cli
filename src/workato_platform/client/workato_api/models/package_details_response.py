# coding: utf-8

"""
    Workato Platform API

    Official Workato Platform API for managing recipes, connections, projects, and other automation resources.  ## Authentication All endpoints require a Bearer token in the Authorization header.  ## Base URL The base URL varies by region: - US: `https://www.workato.com` - EU: `https://app.eu.workato.com` - JP: `https://app.jp.workato.com` - SG: `https://app.sg.workato.com` - AU: `https://app.au.workato.com` - IL: `https://app.il.workato.com` - Trial: `https://app.trial.workato.com` 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from workato_platform.client.workato_api.models.package_details_response_recipe_status_inner import PackageDetailsResponseRecipeStatusInner
from typing import Optional, Set
from typing_extensions import Self

class PackageDetailsResponse(BaseModel):
    """
    PackageDetailsResponse
    """ # noqa: E501
    id: StrictInt
    operation_type: StrictStr
    status: StrictStr
    export_manifest_id: Optional[StrictInt] = None
    download_url: Optional[StrictStr] = None
    error: Optional[StrictStr] = Field(default=None, description="Error message when status is failed")
    recipe_status: Optional[List[PackageDetailsResponseRecipeStatusInner]] = None
    __properties: ClassVar[List[str]] = ["id", "operation_type", "status", "export_manifest_id", "download_url", "error", "recipe_status"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['export', 'import']):
            raise ValueError("must be one of enum values ('export', 'import')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['completed', 'failed', 'processing', 'in_progress']):
            raise ValueError("must be one of enum values ('completed', 'failed', 'processing', 'in_progress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recipe_status (list)
        _items = []
        if self.recipe_status:
            for _item_recipe_status in self.recipe_status:
                if _item_recipe_status:
                    _items.append(_item_recipe_status.to_dict())
            _dict['recipe_status'] = _items
        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['download_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "operation_type": obj.get("operation_type"),
            "status": obj.get("status"),
            "export_manifest_id": obj.get("export_manifest_id"),
            "download_url": obj.get("download_url"),
            "error": obj.get("error"),
            "recipe_status": [PackageDetailsResponseRecipeStatusInner.from_dict(_item) for _item in obj["recipe_status"]] if obj.get("recipe_status") is not None else None
        })
        return _obj


