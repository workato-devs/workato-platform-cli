# coding: utf-8

"""
    Workato Platform API

    Official Workato Platform API for managing recipes, connections, projects, and other automation resources.  ## Authentication All endpoints require a Bearer token in the Authorization header.  ## Base URL The base URL varies by region: - US: `https://www.workato.com` - EU: `https://app.eu.workato.com` - JP: `https://app.jp.workato.com` - SG: `https://app.sg.workato.com` - AU: `https://app.au.workato.com` - IL: `https://app.il.workato.com` - Trial: `https://app.trial.workato.com`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from workato_platform.client.workato_api.models.data_table_column_request import DataTableColumnRequest

class TestDataTableColumnRequest(unittest.TestCase):
    """DataTableColumnRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataTableColumnRequest:
        """Test DataTableColumnRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataTableColumnRequest`
        """
        model = DataTableColumnRequest()
        if include_optional:
            return DataTableColumnRequest(
                type = 'boolean',
                name = '',
                optional = True,
                field_id = 'bf325375-e030-fccb-a009-17317c574773',
                hint = '',
                default_value = None,
                metadata = { },
                multivalue = True,
                relation = workato_platform.client.workato_api.models.data_table_relation.DataTableRelation(
                    table_id = '2507a39a-6847-4857-88ed-c3b9c8302e02',
                    field_id = '900454f4-5b3d-4670-bc3c-d640915156f2', )
            )
        else:
            return DataTableColumnRequest(
                type = 'boolean',
                name = '',
                optional = True,
        )
        """

    def testDataTableColumnRequest(self):
        """Test DataTableColumnRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
